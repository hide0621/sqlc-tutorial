// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: books.sql

package dbgen

import (
	"context"
)

const fullScanOfBooks = `-- name: FullScanOfBooks :many
SELECT id, name, release_year, total_page
FROM books
`

func (q *Queries) FullScanOfBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, fullScanOfBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ReleaseYear,
			&i.TotalPage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBooks = `-- name: InsertBooks :exec
INSERT INTO books (
    name,
    release_year,
    total_page
) VALUES (
    ?, ?, ?
)
RETURNING id, name, release_year, total_page
`

type InsertBooksParams struct {
	Name        string
	ReleaseYear int64
	TotalPage   int64
}

func (q *Queries) InsertBooks(ctx context.Context, arg InsertBooksParams) error {
	_, err := q.db.ExecContext(ctx, insertBooks, arg.Name, arg.ReleaseYear, arg.TotalPage)
	return err
}
